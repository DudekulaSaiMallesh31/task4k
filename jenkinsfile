pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "sai1235689ijhgvcf/task4:latest"
        CONTAINER_NAME = "task4-app"
    }

    stages {
        stage('Login to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'e6e2460e-825a-433c-8df9-4eb76e32c55b', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                        bat 'echo %DOCKER_PASSWORD% | docker login -u %DOCKER_USER% --password-stdin'
                    }
                }
            }
        }

        stage('Pull Docker Image') {
            steps {
                script {
                    def result = bat(script: 'docker pull %DOCKER_IMAGE%', returnStatus: true)
                    if (result != 0) {
                        error "‚ùå Docker image pull failed! Check your image name and credentials."
                    }
                }
            }
        }

        stage('Stop & Remove Old Container') {
            steps {
                script {
                    def containerExists = bat(script: 'docker ps -a -q --filter name=%CONTAINER_NAME%', returnStdout: true).trim()
                    if (containerExists) {
                        bat 'docker stop %CONTAINER_NAME% || echo "Container not running"'
                        bat 'docker rm %CONTAINER_NAME% || echo "Container already removed"'
                    } else {
                        echo '‚úÖ No existing container found. Proceeding...'
                    }
                }
            }
        }

        stage('Run New Container') {
            steps {
                script {
                    def result = bat(script: 'docker run -d -p 8080:8080 --name %CONTAINER_NAME% %DOCKER_IMAGE%', returnStatus: true)
                    if (result != 0) {
                        error "‚ùå Failed to start container! Check Docker logs."
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    bat 'docker ps'
                    echo '‚úÖ Deployment verification complete!'
                }
            }
        }
    }

    post {
        success {
            echo 'üöÄ Deployment Successful! Your app is running at http://localhost:8080'
        }
        failure {
            echo '‚ùå Deployment Failed! Check logs for details.'
        }
    }
}
